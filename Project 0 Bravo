/////////////////////////////////////////////////////////////////
//
// Name: Project 0 Bravo
// Author: Sean Okunseri (seanokunseri@gmail.com)
// Date: 03/01/2020
// Description: Series of apex methods to demonstrate
// basic understanding of coding concepts.
//
/////////////////////////////////////////////////////////////////

public class P0B {
    
    public static Integer nFibonacci( Integer n ){
        if (n <= 0){
            return 0;
        } else if (n == 1 || n == 2){
            return 1;
        } else {
            Integer fib = nFibonacci(n-1) + nFibonacci(n-2);
            return fib;
        }
    }
   
    public static Integer[] sortArray( Integer[] intList ) {
        integer iterationSize = intList.size();
        for(integer i = 0; i < intList.size(); i++){
             
            for(integer n = 0; n < iterationSize; n++){
                if(n + 1 == intList.size()){
                    break;
                }
                if(intList.get(n) > intList.get(n + 1)){
                    integer  swapVal = intList.get(n); 
                    intList.set(n,intList.get(n+1));
                    intList.set(n+1,swapVal);
                }
            }
        }
        return intList;
    }
    
    public static Integer nFactorial( Integer n) {
        if(n == 0){
            return 1;
        } else {
           	integer factorial = n*nFactorial( n - 1);
            return factorial;
        }
   }
    
    public static Integer[] rotateLeftNTimes(Integer[] arrList, Integer n) {
        for(integer i = 0; i < n; i++){
            if(i + 1 == arrList.size()){
                i=0;
                n= n - arrList.size();
            } else {
            	integer  swapVal = arrList.get(i); 
                arrList.set(i,arrList.get(i+1));
                arrList.set(i+1,swapVal);
            }
          }
          return arrList;
       }
    
    public static Boolean bracketsAreBalanced( String s ) {
        
        List<String> stringList = new List<String>();
        stringList = s.split('');

        for(integer i = 0; i < stringList.size(); i++){
            if(stringList.get(i) == ' '){
                stringList.remove(i);
            }   
        }
         for(integer j = 0; j < stringList.size(); j++){

            if (stringList.get(j).equals('(') && !stringList.get((stringList.size()-1) - j).equals(')') ||
                stringList.get(j).equals('{') && !stringList.get((stringList.size()-1) - j).equals('}') ||
                stringList.get(j).equals('[') && !stringList.get((stringList.size()-1) - j).equals(']')) {
              	return false;
                } else {
                    return true;
                }
        }        
        return false;
    } 


    
    public static void updateAccountSize() {
        
        List<Account> accUpdate = new List<Account>();
        List<Account> acc = new List<Account>();
        acc = [SELECT Size__c, NumberOfEmployees 
               FROM Account];
        
        for(Account i: acc){
            if(i.NumberOfEmployees >= 1 && i.NumberOfEmployees <= 1000){
                i.Size__c = 'small';
                accUpdate.add(i);
            }
        	if(i.NumberOfEmployees >= 1001 && i.NumberOfEmployees <= 10000){
                i.Size__c = 'medium';
                accUpdate.add(i);
            }
            if(i.NumberOfEmployees > 10000){
                i.Size__c = 'large';
                accUpdate.add(i);
            }
        }
	
        update accUpdate;
    
    }
    
    public static void updateCALeads() {
        
        List<Lead> leadUpdate = new List<Lead>();
        List<Lead> leadList = new List<Lead>();
        leadList = [SELECT State, Status, Description 
                    FROM Lead 
                    WHERE State = 'CA'];
        
        for(Lead i: leadList){
            i.Description = 'We are no longer doing business in California.';
            i.Status = 'Closed - Not Converted';
            leadUpdate.add(i);
        } 
		update leadUpdate;
    }
    
    public static void closePastDueOpportunities() {
        
        List<Opportunity> oppUpdate = new List<Opportunity>();
        List<Opportunity> oppList = new List<Opportunity>();
        oppList = [SELECT CloseDate, StageName 
                   FROM Opportunity 
                   WHERE CloseDate < TODAY 
                   AND StageName != 'Closed Won'];
        
        for(Opportunity i: oppList){
            i.StageName = 'Closed Lost';
            oppUpdate.add(i);
        }
        update oppUpdate;
    }

}
